{"ast":null,"code":"/*import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { cartEmpty, loadCart } from './helper/cartHelper';\nimport { getmeToken, processPayment } from './helper/paymentbhelper';\nimport { createOrder } from './helper/OrderHelper';\nimport { isAuthenticated } from '../auth/helper';\nimport DropIn from \"braintree-web-drop-in-react\";\n\nconst Paymentb = ({ products, setReload = f => f, reload = undefined }) => {\n\n    const [info, setInfo] = useState({\n        loading: false,\n        success: false,\n        clientToken: null,\n        error: \"\",\n        instance: {}\n    });\n\n    const userId = isAuthenticated() && isAuthenticated().user._id;\n    const token = isAuthenticated() && isAuthenticated().token;\n\n    const getToken = (userId, token) => {\n        getmeToken(userId, token).then((info) => {\n            // console.log(\"INFORMATION\", info);\n            if (info && info?.error) {\n                setInfo({ ...info, error: info?.error });\n            } else {\n                const clientToken = info?.clientToken;\n                setInfo({ clientToken });\n            }\n        });\n    };\n    const showbtdropIn = () => {\n        return (\n            <div>\n                {info.clientToken !== null && products.length > 0 ? (\n                    <div>\n                        <DropIn\n                            options={{ authorization: info.clientToken }}\n                            onInstance={instance => (info?.instance = instance)}\n                        />\n                        <button className=\"btn btn-block btn-success rounded\" onClick={onPurchase}>\n                            Buy Now\n                        </button>\n                    </div>\n                ) : (\n                    <h4>Please <Link to=\"/signin\" className=\"text-white border-bottom\">Login</Link> or <Link to=\"/\" className=\"text-white border-bottom\">add something</Link> to cart.</h4>\n                )}\n            </div>\n        );\n    }\n\n    useEffect(() => {\n        getToken(userId, token);\n    }, []);\n\n    const onPurchase = () => {\n        setInfo({...info, loading: true });\n        let nonce;\n        let getNonce = info?.instance?.requestPaymentMethod().then(data => {\n            nonce = data.nonce;\n            const paymentData = {\n                paymentMethodNonce: nonce,\n                amount: getAmount()\n            };\n            processPayment(userId, token, paymentData).then(response => {\n                setInfo({ ...info, success: response?.success, loading: false });\n                console.log(\"PAYMENT SUCCESSFUL\")\n                const orderData = {\n                    products: products,\n                    transaction_id: response?.transaction?.id,\n                    amount: response?.transaction?.amount,\n                }\n                createOrder(userId, token, orderData);\n                cartEmpty(() => {\n                    console.log(\"Did we got a crash?\")\n                });\n                setReload(!reload);\n            }).catch(error => {\n                setInfo({ loading: false, success: false })\n                console.log(\"PAYMENT FAILED\")\n            });\n        });\n    }\n\n    const getAmount = () => {\n        let amount = 0;\n        products.map(p => {\n            amount = amount + p.price;\n        });\n        return amount;\n    }\n\n    return (\n        <div>\n            <h3>Total Amount - ${getAmount()}</h3>\n            <br />\n            {showbtdropIn()}\n        </div>\n    );\n}\n\nexport default Paymentb;*/","map":{"version":3,"sources":["/home/aakash/Desktop/Icomernbootcamp/projfronted/src/core/Paymentb.js"],"names":[],"mappingssourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { cartEmpty, loadCart } from './helper/cartHelper';\nimport { getmeToken, processPayment } from './helper/paymentbhelper';\nimport { createOrder } from './helper/OrderHelper';\nimport { isAuthenticated } from '../auth/helper';\nimport DropIn from \"braintree-web-drop-in-react\";\n\nconst Paymentb = ({ products, setReload = f => f, reload = undefined }) => {\n\n    const [info, setInfo] = useState({\n        loading: false,\n        success: false,\n        clientToken: null,\n        error: \"\",\n        instance: {}\n    });\n\n    const userId = isAuthenticated() && isAuthenticated().user._id;\n    const token = isAuthenticated() && isAuthenticated().token;\n\n    const getToken = (userId, token) => {\n        getmeToken(userId, token).then((info) => {\n            // console.log(\"INFORMATION\", info);\n            if (info && info?.error) {\n                setInfo({ ...info, error: info?.error });\n            } else {\n                const clientToken = info?.clientToken;\n                setInfo({ clientToken });\n            }\n        });\n    };\n    const showbtdropIn = () => {\n        return (\n            <div>\n                {info.clientToken !== null && products.length > 0 ? (\n                    <div>\n                        <DropIn\n                            options={{ authorization: info.clientToken }}\n                            onInstance={instance => (info?.instance = instance)}\n                        />\n                        <button className=\"btn btn-block btn-success rounded\" onClick={onPurchase}>\n                            Buy Now\n                        </button>\n                    </div>\n                ) : (\n                    <h4>Please <Link to=\"/signin\" className=\"text-white border-bottom\">Login</Link> or <Link to=\"/\" className=\"text-white border-bottom\">add something</Link> to cart.</h4>\n                )}\n            </div>\n        );\n    }\n\n    useEffect(() => {\n        getToken(userId, token);\n    }, []);\n\n    const onPurchase = () => {\n        setInfo({...info, loading: true });\n        let nonce;\n        let getNonce = info?.instance?.requestPaymentMethod().then(data => {\n            nonce = data.nonce;\n            const paymentData = {\n                paymentMethodNonce: nonce,\n                amount: getAmount()\n            };\n            processPayment(userId, token, paymentData).then(response => {\n                setInfo({ ...info, success: response?.success, loading: false });\n                console.log(\"PAYMENT SUCCESSFUL\")\n                const orderData = {\n                    products: products,\n                    transaction_id: response?.transaction?.id,\n                    amount: response?.transaction?.amount,\n                }\n                createOrder(userId, token, orderData);\n                cartEmpty(() => {\n                    console.log(\"Did we got a crash?\")\n                });\n                setReload(!reload);\n            }).catch(error => {\n                setInfo({ loading: false, success: false })\n                console.log(\"PAYMENT FAILED\")\n            });\n        });\n    }\n\n    const getAmount = () => {\n        let amount = 0;\n        products.map(p => {\n            amount = amount + p.price;\n        });\n        return amount;\n    }\n\n    return (\n        <div>\n            <h3>Total Amount - ${getAmount()}</h3>\n            <br />\n            {showbtdropIn()}\n        </div>\n    );\n}\n\nexport default Paymentb;*/"]},"metadata":{},"sourceType":"module"}